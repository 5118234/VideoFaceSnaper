<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ImageProcessor</name>
    </assembly>
    <members>
        <member name="T:ImageProcessor.Helpers.Extensions.ImageExtensions">
            <summary>
            Extensions to the <see cref="T:System.Drawing.Image"/> class
            </summary>
        </member>
        <member name="M:ImageProcessor.Helpers.Extensions.ImageExtensions.ToBytes(System.Drawing.Image,System.Drawing.Imaging.ImageFormat)">
            <summary>
            Converts an image to an array of bytes.
            </summary>
            <param name="image">The <see cref="T:System.Drawing.Image"/> instance that this method extends.</param>
            <param name="imageFormat">The <see cref="T:System.Drawing.Imaging.ImageFormat"/> to export the image with.</param>
            <returns>A byte array representing the current image.</returns>
        </member>
        <member name="T:ImageProcessor.Helpers.Extensions.EnumExtensions">
            <summary>
            Encapsulates a series of time saving extension methods to <see cref="T:System.Enum">Enum</see>s.
            </summary>
        </member>
        <member name="M:ImageProcessor.Helpers.Extensions.EnumExtensions.ToDescription(System.Enum)">
            <summary>
            Extends the <see cref="T:System.Enum">Enum</see> type to return the description attribute for the given type.
            Useful for when the type to match in the data source contains spaces. 
            </summary>
            <param name="expression">The given <see cref="T:System.Enum">Enum</see> that this method extends.</param>
            <returns>A string containing the Enum's description attribute.</returns>
        </member>
        <member name="T:ImageProcessor.Helpers.Extensions.StringExtensions">
            <summary>
            Encapsulates a series of time saving extension methods to the <see cref="T:System.String"/> class.
            </summary>
        </member>
        <member name="M:ImageProcessor.Helpers.Extensions.StringExtensions.ToMD5Fingerprint(System.String)">
            <summary>
            Creates an MD5 fingerprint of the String.
            </summary>
            <param name="expression">The <see cref="T:System.String">String</see> instance that this method extends.</param>
            <returns>An MD5 fingerprint of the String.</returns>
        </member>
        <member name="M:ImageProcessor.Helpers.Extensions.StringExtensions.ToSHA1Fingerprint(System.String)">
            <summary>
            Creates an SHA1 fingerprint of the String.
            </summary>
            <param name="expression">The <see cref="T:System.String">String</see> instance that this method extends.</param>
            <returns>An SHA1 fingerprint of the String.</returns>
        </member>
        <member name="M:ImageProcessor.Helpers.Extensions.StringExtensions.ToSHA256Fingerprint(System.String)">
            <summary>
            Creates an SHA256 fingerprint of the String.
            </summary>
            <param name="expression">The <see cref="T:System.String">String</see> instance that this method extends.</param>
            <returns>An SHA256 fingerprint of the String.</returns>
        </member>
        <member name="M:ImageProcessor.Helpers.Extensions.StringExtensions.ToSHA512Fingerprint(System.String)">
            <summary>
            Creates an SHA512 fingerprint of the String.
            </summary>
            <param name="expression">The <see cref="T:System.String">String</see> instance that this method extends.</param>
            <returns>An SHA256 fingerprint of the String.</returns>
        </member>
        <member name="M:ImageProcessor.Helpers.Extensions.StringExtensions.ToPositiveIntegerArray(System.String)">
            <summary>
            Creates an array of integers scraped from the String.
            </summary>
            <param name="expression">The <see cref="T:System.String">String</see> instance that this method extends.</param>
            <returns>An array of integers scraped from the String.</returns>
        </member>
        <member name="M:ImageProcessor.Helpers.Extensions.StringExtensions.IsValidVirtualPathName(System.String)">
            <summary>
            Checks the string to see whether the value is a valid virtual path name.
            </summary>
            <param name="expression">The <see cref="T:System.String">String</see> instance that this method extends.</param>
            <returns>True if the given string is a valid virtual path name</returns>
        </member>
        <member name="M:ImageProcessor.Helpers.Extensions.StringExtensions.IsValidPathName(System.String)">
            <summary>
            Checks the string to see whether the value is a valid path name.
            </summary>
            <remarks>
            For an explanation 
            <see cref="!:http://stackoverflow.com/questions/62771/how-check-if-given-string-is-legal-allowed-file-name-under-windows"/>
            </remarks>
            <param name="expression">The <see cref="T:System.String">String</see> instance that this method extends.</param>
            <returns>True if the given string is a valid path name</returns>
        </member>
        <member name="T:ImageProcessor.ImageFactory">
            <summary>
            Encapsulates methods for processing image files.
            </summary>
        </member>
        <member name="F:ImageProcessor.ImageFactory.DefaultJpegQuality">
            <summary>
            The default quality for jpeg files.
            </summary>
        </member>
        <member name="F:ImageProcessor.ImageFactory.backupImageFormat">
            <summary>
            The backup image format.
            </summary>
        </member>
        <member name="F:ImageProcessor.ImageFactory.isIndexed">
            <summary>
            Whether the image is indexed.
            </summary>
        </member>
        <member name="F:ImageProcessor.ImageFactory.isDisposed">
            <summary>
            A value indicating whether this instance of the given entity has been disposed.
            </summary>
            <value><see langword="true"/> if this instance has been disposed; otherwise, <see langword="false"/>.</value>
            <remarks>
            If the entity is disposed, it must not be disposed a second
            time. The isDisposed field is set the first time the entity
            is disposed. If the isDisposed field is true, then the Dispose()
            method will not dispose again. This help not to prolong the entity's
            life in the Garbage Collector.
            </remarks>
        </member>
        <member name="M:ImageProcessor.ImageFactory.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:ImageProcessor.ImageFactory">ImageFactory</see> class. 
            </summary>
            <remarks>
            Use C# destructor syntax for finalization code.
            This destructor will run only if the Dispose method 
            does not get called.
            It gives your base class the opportunity to finalize.
            Do not provide destructors in types derived from this class.
            </remarks>
        </member>
        <member name="P:ImageProcessor.ImageFactory.Image">
            <summary>
            Gets the local image for manipulation.
            </summary>
        </member>
        <member name="P:ImageProcessor.ImageFactory.ImagePath">
            <summary>
            Gets the path to the local image for manipulation.
            </summary>
        </member>
        <member name="P:ImageProcessor.ImageFactory.QueryString">
            <summary>
            Gets the query-string parameters for web image manipulation.
            </summary>
        </member>
        <member name="P:ImageProcessor.ImageFactory.ShouldProcess">
            <summary>
            Gets a value indicating whether the image factory should process the file.
            </summary>
        </member>
        <member name="P:ImageProcessor.ImageFactory.ImageFormat">
            <summary>
            Gets the file format of the image. 
            </summary>
        </member>
        <member name="P:ImageProcessor.ImageFactory.JpegQuality">
            <summary>
            Gets or sets the quality of output for jpeg images as a percentile.
            </summary>
        </member>
        <member name="M:ImageProcessor.ImageFactory.Load(System.IO.MemoryStream)">
            <summary>
            Loads the image to process. Always call this method first.
            </summary>
            <param name="memoryStream">
            The <see cref="T:System.IO.MemoryStream"/> containing the image information.
            </param>
            <returns>
            The current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class.
            </returns>
        </member>
        <member name="M:ImageProcessor.ImageFactory.Load(System.String)">
            <summary>
            Loads the image to process. Always call this method first.
            </summary>
            <param name="imagePath">The absolute path to the image to load.</param>
            <returns>
            The current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class.
            </returns>
        </member>
        <member name="M:ImageProcessor.ImageFactory.Update(System.Drawing.Image)">
            <summary>
            Updates the specified image. Used by the various IProcessors.
            </summary>
            <param name="image">The image.</param>
            <returns>
            The current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class.
            </returns>
        </member>
        <member name="M:ImageProcessor.ImageFactory.Reset">
            <summary>
            Resets the current image to its original loaded state.
            </summary>
            <returns>
            The current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class.
            </returns>
        </member>
        <member name="M:ImageProcessor.ImageFactory.AddQueryString(System.String)">
            <summary>
            Adds a query-string to the image factory to allow auto-processing of remote files.
            </summary>
            <param name="query">The query-string parameter to process.</param>
            <returns>
            The current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class.
            </returns>
        </member>
        <member name="M:ImageProcessor.ImageFactory.Alpha(System.Int32)">
            <summary>
            Changes the opacity of the current image.
            </summary>
            <param name="percentage">
            The percentage by which to alter the images opacity.
            Any integer between 0 and 100.
            </param>
            <returns>
            The current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class.
            </returns>
        </member>
        <member name="M:ImageProcessor.ImageFactory.Brightness(System.Int32)">
            <summary>
            Changes the brightness of the current image.
            </summary>
            <param name="percentage">
            The percentage by which to alter the images brightness.
            Any integer between -100 and 100.
            </param>
            <returns>
            The current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class.
            </returns>
        </member>
        <member name="M:ImageProcessor.ImageFactory.Contrast(System.Int32)">
            <summary>
            Changes the contrast of the current image.
            </summary>
            <param name="percentage">
            The percentage by which to alter the images contrast.
            Any integer between -100 and 100.
            </param>
            <returns>
            The current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class.
            </returns>
        </member>
        <member name="M:ImageProcessor.ImageFactory.Crop(System.Drawing.Rectangle)">
            <summary>
            Crops the current image to the given location and size.
            </summary>
            <param name="rectangle">
            The <see cref="T:System.Drawing.Rectangle"/> containing the coordinates to crop the image to.
            </param>
            <returns>
            The current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class.
            </returns>
        </member>
        <member name="M:ImageProcessor.ImageFactory.Filter(System.String)">
            <summary>
            Applies a filter to the current image.
            </summary>
            <param name="filterName">
            The name of the filter to add to the image.
            </param>
            <returns>
            The current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class.
            </returns>
        </member>
        <member name="M:ImageProcessor.ImageFactory.Flip(System.Boolean)">
            <summary>
            Flips the current image either horizontally or vertically.
            </summary>
            <param name="flipVertically">
            Whether to flip the image vertically.
            </param>
            <returns>
            The current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class.
            </returns>
        </member>
        <member name="M:ImageProcessor.ImageFactory.Format(System.Drawing.Imaging.ImageFormat,System.Boolean)">
            <summary>
            Sets the output format of the current image to the matching <see cref="T:System.Drawing.Imaging.ImageFormat"/>.
            </summary>
            <param name="imageFormat">The <see cref="T:System.Drawing.Imaging.ImageFormat"/>. to set the image to.</param>
            <param name="indexedFormat">Whether the pixel format of the image should be indexed. Used for generating Png8 images.</param>
            <returns>
            The current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class.
            </returns>
        </member>
        <member name="M:ImageProcessor.ImageFactory.Quality(System.Int32)">
            <summary>
            Alters the output quality of the current image.
            <remarks>
            This method will only effect the output quality of jpeg images
            </remarks>
            </summary>
            <param name="percentage">A value between 1 and 100 to set the quality to.</param>
            <returns>
            The current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class.
            </returns>
        </member>
        <member name="M:ImageProcessor.ImageFactory.Resize(System.Drawing.Size)">
            <summary>
            Resizes the current image to the given dimensions.
            </summary>
            <param name="size">
            The <see cref="T:System.Drawing.Size"/> containing the width and height to set the image to.
            </param>
            <returns>
            The current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class.
            </returns>
        </member>
        <member name="M:ImageProcessor.ImageFactory.Rotate(ImageProcessor.Imaging.RotateLayer)">
            <summary>
            Rotates the current image by the given angle.
            </summary>
            <param name="rotateLayer">
            The <see cref="T:ImageProcessor.Imaging.RotateLayer"/> containing the properties to rotate the image.
            </param>
            <returns>
            The current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class.
            </returns>
        </member>
        <member name="M:ImageProcessor.ImageFactory.RoundedCorners(ImageProcessor.Imaging.RoundedCornerLayer)">
            <summary>
            Adds rounded corners to the current image.
            </summary>
            <param name="roundedCornerLayer">
            The <see cref="T:ImageProcessor.Imaging.RoundedCornerLayer"/> containing the properties to round corners on the image.
            </param>
            <returns>
            The current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class.
            </returns>
        </member>
        <member name="M:ImageProcessor.ImageFactory.Saturation(System.Int32)">
            <summary>
            Changes the saturation of the current image.
            </summary>
            <param name="percentage">
            The percentage by which to alter the images saturation.
            Any integer between -100 and 100.
            </param>
            <returns>
            The current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class.
            </returns>
        </member>
        <member name="M:ImageProcessor.ImageFactory.Vignette">
            <summary>
            Adds a vignette image effect to the current image.
            </summary>
            <returns>
            The current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class.
            </returns>
        </member>
        <member name="M:ImageProcessor.ImageFactory.Watermark(ImageProcessor.Imaging.TextLayer)">
            <summary>
            Adds a text based watermark to the current image.
            </summary>
            <param name="textLayer">
            The <see cref="T:ImageProcessor.Imaging.TextLayer"/> containing the properties necessary to add 
            the text based watermark to the image.
            </param>
            <returns>
            The current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class.
            </returns>
        </member>
        <member name="M:ImageProcessor.ImageFactory.Save(System.String)">
            <summary>
            Saves the current image to the specified file path.
            </summary>
            <param name="filePath">The path to save the image to.</param>
            <returns>
            The current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class.
            </returns>
        </member>
        <member name="M:ImageProcessor.ImageFactory.Save(System.IO.MemoryStream)">
            <summary>
            Saves the current image to the specified output stream.
            </summary>
            <param name="memoryStream">
            The <see cref="T:System.IO.MemoryStream"/> to save the image information to.
            </param>
            <returns>
            The current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class.
            </returns>
        </member>
        <member name="M:ImageProcessor.ImageFactory.Dispose">
            <summary>
            Disposes the object and frees resources for the Garbage Collector.
            </summary>
        </member>
        <member name="M:ImageProcessor.ImageFactory.Dispose(System.Boolean)">
            <summary>
            Disposes the object and frees resources for the Garbage Collector.
            </summary>
            <param name="disposing">If true, the object gets disposed.</param>
        </member>
        <member name="M:ImageProcessor.ImageFactory.FixIndexedPallete">
            <summary>
            Uses the <see cref="T:ImageProcessor.Imaging.ColorQuantizer"/>
            to fix the color palette of gif images.
            </summary>
        </member>
        <member name="T:ImageProcessor.Imaging.ColorQuantizer">
            <summary>
            The color quantizer.
            </summary>
        </member>
        <member name="M:ImageProcessor.Imaging.ColorQuantizer.Quantize(System.Drawing.Image,System.Drawing.Imaging.PixelFormat)">
            <summary>The quantize.</summary>
            <param name="image">The image.</param>
            <param name="bitmapPixelFormat">The bitmap pixel format.</param>
            <returns>The quantized image with the recalculated color palette.</returns>
        </member>
        <member name="M:ImageProcessor.Imaging.ColorQuantizer.Quantize(System.Drawing.Image,System.Drawing.Imaging.PixelFormat,System.Boolean)">
            <summary>The quantize.</summary>
            <param name="image">The image.</param>
            <param name="pixelFormat">The pixel format.</param>
            <param name="useDither">The use dither.</param>
            <returns>The quantized image with the recalculated color palette.</returns>
        </member>
        <member name="M:ImageProcessor.Imaging.ColorQuantizer.DoQuantize(System.Drawing.Bitmap,System.Drawing.Imaging.PixelFormat,System.Boolean)">
            <summary>
            Does the quantize.
            </summary>
            <param name="bitmapSource">The bitmap source.</param>
            <param name="pixelFormat">The pixel format.</param>
            <param name="useDither">if set to <c>true</c> [use dither].</param>
            <returns>The quantized image with the recalculated color palette.</returns>
        </member>
        <member name="M:ImageProcessor.Imaging.ColorQuantizer.DitherSourcePixel(System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Dithers the source pixel.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="rowStart">The row start.</param>
            <param name="col">The column.</param>
            <param name="deltaRed">The delta red.</param>
            <param name="deltaGreen">The delta green.</param>
            <param name="deltaBlue">The delta blue.</param>
            <param name="weight">The weight.</param>
        </member>
        <member name="M:ImageProcessor.Imaging.ColorQuantizer.GetSourcePixel(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Gets the source pixel.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="rowStart">The row start.</param>
            <param name="col">The column.</param>
            <returns>The source pixel.</returns>
        </member>
        <member name="M:ImageProcessor.Imaging.ColorQuantizer.ChannelAdjustment(System.Byte,System.Int32)">
            <summary>Gets the channel adjustment.</summary>
            <param name="current">The current.</param>
            <param name="offset">The offset.</param>
            <returns>The channel adjustment.</returns>
        </member>
        <member name="T:ImageProcessor.Imaging.ColorQuantizer.Octree">
            <summary>data structure for storing and reducing colors used in the source image</summary>
        </member>
        <member name="F:ImageProcessor.Imaging.ColorQuantizer.Octree.octreeMaxColors">
            <summary>The m_max colors.</summary>
        </member>
        <member name="F:ImageProcessor.Imaging.ColorQuantizer.Octree.octreeReducibleNodes">
            <summary>The m_reducible nodes.</summary>
        </member>
        <member name="F:ImageProcessor.Imaging.ColorQuantizer.Octree.octreeColorCount">
            <summary>The m_color count.</summary>
        </member>
        <member name="F:ImageProcessor.Imaging.ColorQuantizer.Octree.octreeHasTransparent">
            <summary>The m_has transparent.</summary>
        </member>
        <member name="F:ImageProcessor.Imaging.ColorQuantizer.Octree.octreeLastArgb">
            <summary>The m_last argb.</summary>
        </member>
        <member name="F:ImageProcessor.Imaging.ColorQuantizer.Octree.octreeLastNode">
            <summary>The m_last node.</summary>
        </member>
        <member name="F:ImageProcessor.Imaging.ColorQuantizer.Octree.octreePalette">
            <summary>The m_palette.</summary>
        </member>
        <member name="F:ImageProcessor.Imaging.ColorQuantizer.Octree.octreeRoot">
            <summary>The m_root.</summary>
        </member>
        <member name="M:ImageProcessor.Imaging.ColorQuantizer.Octree.#ctor(System.Drawing.Imaging.PixelFormat)">
            <summary>Initializes a new instance of the <see cref="T:ImageProcessor.Imaging.ColorQuantizer.Octree"/> class. Constructor</summary>
            <param name="pixelFormat">desired pixel format</param>
        </member>
        <member name="M:ImageProcessor.Imaging.ColorQuantizer.Octree.AddColor(ImageProcessor.Imaging.ColorQuantizer.Pixel)">
            <summary>Add the given pixel color to the octree</summary>
            <param name="pixel">points to the pixel color we want to add</param>
        </member>
        <member name="M:ImageProcessor.Imaging.ColorQuantizer.Octree.GetPaletteIndex(ImageProcessor.Imaging.ColorQuantizer.Pixel)">
            <summary>
            Given a pixel color, return the index of the palette entry
            we want to use in the reduced image. If the color is not in the 
            octree, OctreeNode.GetPaletteIndex will return a negative number.
            In that case, we will have to calculate the palette index the brute-force
            method by computing the least distance to each color in the palette array.
            </summary>
            <param name="pixel">pointer to the pixel color we want to look up</param>
            <returns>index of the palette entry we want to use for this color</returns>
        </member>
        <member name="M:ImageProcessor.Imaging.ColorQuantizer.Octree.GetPaletteColors">
            <summary>
            Return a color palette for the computed octree.
            </summary>
            <returns>A color palette for the computed octree</returns>
        </member>
        <member name="M:ImageProcessor.Imaging.ColorQuantizer.Octree.SetLastNode(ImageProcessor.Imaging.ColorQuantizer.Octree.OctreeNode,System.Int32)">
            <summary>set up the values we need to reuse the given pointer if the next color is argb</summary>
            <param name="node">last node to which we added a color</param>
            <param name="argb">last color we added</param>
        </member>
        <member name="M:ImageProcessor.Imaging.ColorQuantizer.Octree.AddReducibleNode(ImageProcessor.Imaging.ColorQuantizer.Octree.OctreeNode)">
            <summary>When a reducible node is added, this method is called to add it to the appropriate
            reducible node list (given its level)</summary>
            <param name="reducibleNode">node to add to a reducible list</param>
        </member>
        <member name="T:ImageProcessor.Imaging.ColorQuantizer.Octree.OctreeNode">
            <summary>Node for an Octree structure</summary>
        </member>
        <member name="F:ImageProcessor.Imaging.ColorQuantizer.Octree.OctreeNode.NodeLevelMasks">
            <summary>The s_level masks.</summary>
        </member>
        <member name="F:ImageProcessor.Imaging.ColorQuantizer.Octree.OctreeNode.nodeLevel">
            <summary>The m_level.</summary>
        </member>
        <member name="F:ImageProcessor.Imaging.ColorQuantizer.Octree.OctreeNode.nodeOctree">
            <summary>The m_octree.</summary>
        </member>
        <member name="F:ImageProcessor.Imaging.ColorQuantizer.Octree.OctreeNode.nodeBlueSum">
            <summary>The m_blue sum.</summary>
        </member>
        <member name="F:ImageProcessor.Imaging.ColorQuantizer.Octree.OctreeNode.nodeChildNodes">
            <summary>The m_child nodes.</summary>
        </member>
        <member name="F:ImageProcessor.Imaging.ColorQuantizer.Octree.OctreeNode.nodeGreenSum">
            <summary>The m_green sum.</summary>
        </member>
        <member name="F:ImageProcessor.Imaging.ColorQuantizer.Octree.OctreeNode.nodeIsLeaf">
            <summary>The m_is leaf.</summary>
        </member>
        <member name="F:ImageProcessor.Imaging.ColorQuantizer.Octree.OctreeNode.nodePaletteIndex">
            <summary>The m_palette index.</summary>
        </member>
        <member name="F:ImageProcessor.Imaging.ColorQuantizer.Octree.OctreeNode.nodePixelCount">
            <summary>
            The pixel count.Information we need to calculate the average color for a set of pixels
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.ColorQuantizer.Octree.OctreeNode.nodeRedSum">
            <summary>The m_red sum.</summary>
        </member>
        <member name="M:ImageProcessor.Imaging.ColorQuantizer.Octree.OctreeNode.#ctor(System.Int32,ImageProcessor.Imaging.ColorQuantizer.Octree)">
            <summary>Initializes a new instance of the <see cref="T:ImageProcessor.Imaging.ColorQuantizer.Octree.OctreeNode"/> class. Constructor</summary>
            <param name="level">level for this node</param>
            <param name="octree">owning octree</param>
        </member>
        <member name="P:ImageProcessor.Imaging.ColorQuantizer.Octree.OctreeNode.Level">
            <summary>Gets Level.</summary>
        </member>
        <member name="P:ImageProcessor.Imaging.ColorQuantizer.Octree.OctreeNode.NextReducibleNode">
            <summary>
            Gets or sets NextReducibleNode.
            Once we compute a palette, this will be set
            to the palette index associated with this leaf node.
            Nodes are arranged in linked lists of reducible nodes for a given level.
            this field and property is used to traverse that list.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.ColorQuantizer.Octree.OctreeNode.NodeColor">
            <summary>
            Gets the average color for this node.
            </summary>
        </member>
        <member name="M:ImageProcessor.Imaging.ColorQuantizer.Octree.OctreeNode.AddColor(ImageProcessor.Imaging.ColorQuantizer.Pixel)">
            <summary>
            Add the given color to this node if it is a leaf, otherwise recurse 
            down the appropriate child
            </summary>
            <param name="pixel">color to add</param>
            <returns>true if a new color was added to the octree</returns>
        </member>
        <member name="M:ImageProcessor.Imaging.ColorQuantizer.Octree.OctreeNode.GetPaletteIndex(ImageProcessor.Imaging.ColorQuantizer.Pixel)">
            <summary>
            Given a source color, return the palette index to use for the reduced image.
            Returns -1 if the color is not represented in the octree (this happens if
            the color has been dithered into a new color that did not appear in the 
            original image when the octree was formed in pass 1.
            </summary>
            <param name="pixel">source color to look up</param>
            <returns>palette index to use</returns>
        </member>
        <member name="M:ImageProcessor.Imaging.ColorQuantizer.Octree.OctreeNode.Reduce">
            <summary>Reduce this node by combining all child nodes</summary>
            <returns>number of nodes removed</returns>
        </member>
        <member name="M:ImageProcessor.Imaging.ColorQuantizer.Octree.OctreeNode.AddColorsToPalette(System.Drawing.Color[],System.Int32@)">
            <summary>
            If this is a leaf node, add its color to the palette array at the given index
            and increment the index. If not a leaf, recurse the children nodes.
            </summary>
            <param name="colorArray">array of colors</param>
            <param name="paletteIndex">index of the next empty slot in the array</param>
        </member>
        <member name="M:ImageProcessor.Imaging.ColorQuantizer.Octree.OctreeNode.GetChildIndex(ImageProcessor.Imaging.ColorQuantizer.Pixel)">
            <summary>
            Return the child index for a given color.
            Depends on which level this node is in.
            </summary>
            <param name="pixel">color pixel to compute</param>
            <returns>child index (0-7)</returns>
        </member>
        <member name="T:ImageProcessor.Imaging.ColorQuantizer.Pixel">
            <summary>
            Structure of a Format32bppArgb pixel in memory.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.ColorQuantizer.Pixel.Blue">
            <summary>
            Gets or sets the blue component of the pixel.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.ColorQuantizer.Pixel.Green">
            <summary>
            Gets or sets the green component of the pixel.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.ColorQuantizer.Pixel.Red">
            <summary>
            Gets or sets the red component of the pixel.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.ColorQuantizer.Pixel.Alpha">
            <summary>
            Gets or sets the alpha component of the pixel.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.ColorQuantizer.Pixel.Argb">
            <summary>
            Gets the argb combination of the pixel.
            </summary>
        </member>
        <member name="T:ImageProcessor.Imaging.Filters.BlackWhiteMatrixFilter">
            <summary>
            Encapsulates methods with which to add a black and white filter to an image.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Filters.BlackWhiteMatrixFilter.Matrix">
            <summary>
            Gets the <see cref="T:System.Drawing.Imaging.ColorMatrix"/> for this filter instance.
            </summary>
        </member>
        <member name="M:ImageProcessor.Imaging.Filters.BlackWhiteMatrixFilter.TransformImage(ImageProcessor.ImageFactory,System.Drawing.Image,System.Drawing.Image)">
            <summary>
            Processes the image.
            </summary>
            <param name="factory">
            The the current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class containing
            the image to process.
            </param>
            <param name="image">The current image to process</param>
            <param name="newImage">The new Image to return</param>
            <returns>
            The processed image from the current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class.
            </returns>
        </member>
        <member name="T:ImageProcessor.Imaging.Filters.ColorMatrixes">
            <summary>
            A list of available color matrices to apply to an image.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Filters.ColorMatrixes.Sepia">
            <summary>
            Gets Sepia.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Filters.ColorMatrixes.BlackWhite">
            <summary>
            Gets BlackWhite.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Filters.ColorMatrixes.Polaroid">
            <summary>
            Gets Polaroid.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Filters.ColorMatrixes.Lomograph">
            <summary>
            Gets Lomograph.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Filters.ColorMatrixes.GreyScale">
            <summary>
            Gets GreyScale.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Filters.ColorMatrixes.Invert">
            <summary>
            Gets Invert.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Filters.ColorMatrixes.HiSatch">
            <summary>
            Gets HiSatch.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Filters.ColorMatrixes.LoSatch">
            <summary>
            Gets LoSatch.
            </summary>
        </member>
        <member name="T:ImageProcessor.Imaging.Filters.ComicMatrixFilter">
            <summary>
            Encapsulates methods with which to add a comic filter to an image.
            </summary>
        </member>
        <member name="T:ImageProcessor.Imaging.Filters.ComicMatrixFilter.ChannelArgb">
            <summary>
            Enumerates Argb color channels.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Filters.ComicMatrixFilter.ChannelArgb.Blue">
            <summary>
            The blue channel
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Filters.ComicMatrixFilter.ChannelArgb.Green">
            <summary>
            The green channel
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Filters.ComicMatrixFilter.ChannelArgb.Red">
            <summary>
            The red channel
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Filters.ComicMatrixFilter.ChannelArgb.Alpha">
            <summary>
            The alpha channel
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Filters.ComicMatrixFilter.Matrix">
            <summary>
            Gets the <see cref="T:System.Drawing.Imaging.ColorMatrix"/> for this filter instance.
            </summary>
        </member>
        <member name="M:ImageProcessor.Imaging.Filters.ComicMatrixFilter.TransformImage(ImageProcessor.ImageFactory,System.Drawing.Image,System.Drawing.Image)">
            <summary>
            Processes the image.
            </summary>
            <param name="factory">
            The the current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class containing
            the image to process.
            </param>
            <param name="image">The current image to process</param>
            <param name="newImage">The new Image to return</param>
            <returns>
            The processed image from the current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Filters.ComicMatrixFilter.TransferOneArgbChannelFromOneBitmapToAnother(System.Drawing.Bitmap,System.Drawing.Bitmap,ImageProcessor.Imaging.Filters.ComicMatrixFilter.ChannelArgb,ImageProcessor.Imaging.Filters.ComicMatrixFilter.ChannelArgb)">
            <summary>
            Transfers a single ARGB channel from one image to another.
            </summary>
            <param name="source">
            The source.
            </param>
            <param name="destination">
            The destination.
            </param>
            <param name="sourceChannel">
            The source channel.
            </param>
            <param name="destinationChannel">
            The destination channel.
            </param>
        </member>
        <member name="T:ImageProcessor.Imaging.Filters.LoSatchMatrixFilter">
            <summary>
            Encapsulates methods with which to add a low saturated filter to an image.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Filters.LoSatchMatrixFilter.Matrix">
            <summary>
            Gets the <see cref="T:System.Drawing.Imaging.ColorMatrix"/> for this filter instance.
            </summary>
        </member>
        <member name="M:ImageProcessor.Imaging.Filters.LoSatchMatrixFilter.TransformImage(ImageProcessor.ImageFactory,System.Drawing.Image,System.Drawing.Image)">
            <summary>
            Processes the image.
            </summary>
            <param name="factory">
            The the current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class containing
            the image to process.
            </param>
            <param name="image">The current image to process</param>
            <param name="newImage">The new Image to return</param>
            <returns>
            The processed image from the current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class.
            </returns>
        </member>
        <member name="T:ImageProcessor.Imaging.Filters.HiSatchMatrixFilter">
            <summary>
            Encapsulates methods with which to add a high saturated filter to an image.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Filters.HiSatchMatrixFilter.Matrix">
            <summary>
            Gets the <see cref="T:System.Drawing.Imaging.ColorMatrix"/> for this filter instance.
            </summary>
        </member>
        <member name="M:ImageProcessor.Imaging.Filters.HiSatchMatrixFilter.TransformImage(ImageProcessor.ImageFactory,System.Drawing.Image,System.Drawing.Image)">
            <summary>
            Processes the image.
            </summary>
            <param name="factory">
            The the current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class containing
            the image to process.
            </param>
            <param name="image">The current image to process</param>
            <param name="newImage">The new Image to return</param>
            <returns>
            The processed image from the current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class.
            </returns>
        </member>
        <member name="T:ImageProcessor.Imaging.Filters.InvertMatrixFilter">
            <summary>
            Encapsulates methods with which to add an inverted filter to an image.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Filters.InvertMatrixFilter.Matrix">
            <summary>
            Gets the <see cref="T:System.Drawing.Imaging.ColorMatrix"/> for this filter instance.
            </summary>
        </member>
        <member name="M:ImageProcessor.Imaging.Filters.InvertMatrixFilter.TransformImage(ImageProcessor.ImageFactory,System.Drawing.Image,System.Drawing.Image)">
            <summary>
            Processes the image.
            </summary>
            <param name="factory">
            The the current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class containing
            the image to process.
            </param>
            <param name="image">The current image to process</param>
            <param name="newImage">The new Image to return</param>
            <returns>
            The processed image from the current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class.
            </returns>
        </member>
        <member name="T:ImageProcessor.Imaging.Filters.GothamMatrixFilter">
            <summary>
            Encapsulates methods with which to add a gotham filter to an image.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Filters.GothamMatrixFilter.Matrix">
            <summary>
            Gets the <see cref="T:System.Drawing.Imaging.ColorMatrix"/> for this filter instance.
            </summary>
        </member>
        <member name="M:ImageProcessor.Imaging.Filters.GothamMatrixFilter.TransformImage(ImageProcessor.ImageFactory,System.Drawing.Image,System.Drawing.Image)">
            <summary>
            Processes the image.
            </summary>
            <param name="factory">
            The the current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class containing
            the image to process.
            </param>
            <param name="image">The current image to process</param>
            <param name="newImage">The new Image to return</param>
            <returns>
            The processed image from the current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class.
            </returns>
        </member>
        <member name="T:ImageProcessor.Imaging.Filters.GreyScaleMatrixFilter">
            <summary>
            Encapsulates methods with which to add a greyscale filter to an image.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Filters.GreyScaleMatrixFilter.Matrix">
            <summary>
            Gets the <see cref="T:System.Drawing.Imaging.ColorMatrix"/> for this filter instance.
            </summary>
        </member>
        <member name="M:ImageProcessor.Imaging.Filters.GreyScaleMatrixFilter.TransformImage(ImageProcessor.ImageFactory,System.Drawing.Image,System.Drawing.Image)">
            <summary>
            Processes the image.
            </summary>
            <param name="factory">
            The the current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class containing
            the image to process.
            </param>
            <param name="image">The current image to process</param>
            <param name="newImage">The new Image to return</param>
            <returns>
            The processed image from the current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class.
            </returns>
        </member>
        <member name="T:ImageProcessor.Imaging.Filters.LomographMatrixFilter">
            <summary>
            Encapsulates methods with which to add a lomograph filter to an image.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Filters.LomographMatrixFilter.Matrix">
            <summary>
            Gets the <see cref="T:System.Drawing.Imaging.ColorMatrix"/> for this filter instance.
            </summary>
        </member>
        <member name="M:ImageProcessor.Imaging.Filters.LomographMatrixFilter.TransformImage(ImageProcessor.ImageFactory,System.Drawing.Image,System.Drawing.Image)">
            <summary>
            Processes the image.
            </summary>
            <param name="factory">
            The the current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class containing
            the image to process.
            </param>
            <param name="image">The current image to process</param>
            <param name="newImage">The new Image to return</param>
            <returns>
            The processed image from the current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class.
            </returns>
        </member>
        <member name="T:ImageProcessor.Imaging.Filters.PolaroidMatrixFilter">
            <summary>
            Encapsulates methods with which to add a polaroid filter to an image.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Filters.PolaroidMatrixFilter.Matrix">
            <summary>
            Gets the <see cref="T:System.Drawing.Imaging.ColorMatrix"/> for this filter instance.
            </summary>
        </member>
        <member name="M:ImageProcessor.Imaging.Filters.PolaroidMatrixFilter.TransformImage(ImageProcessor.ImageFactory,System.Drawing.Image,System.Drawing.Image)">
            <summary>
            Processes the image.
            </summary>
            <param name="factory">
            The the current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class containing
            the image to process.
            </param>
            <param name="image">The current image to process</param>
            <param name="newImage">The new Image to return</param>
            <returns>
            The processed image from the current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class.
            </returns>
        </member>
        <member name="T:ImageProcessor.Imaging.Filters.SepiaMatrixFilter">
            <summary>
            Encapsulates methods with which to add a sepia filter to an image.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Filters.SepiaMatrixFilter.Matrix">
            <summary>
            Gets the <see cref="T:System.Drawing.Imaging.ColorMatrix"/> for this filter instance.
            </summary>
        </member>
        <member name="M:ImageProcessor.Imaging.Filters.SepiaMatrixFilter.TransformImage(ImageProcessor.ImageFactory,System.Drawing.Image,System.Drawing.Image)">
            <summary>
            Processes the image.
            </summary>
            <param name="factory">
            The the current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class containing
            the image to process.
            </param>
            <param name="image">The current image to process</param>
            <param name="newImage">The new Image to return</param>
            <returns>
            The processed image from the current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class.
            </returns>
        </member>
        <member name="T:ImageProcessor.Imaging.Filters.IMatrixFilter">
            <summary>
            Defines properties and methods for ColorMatrix based filters.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Filters.IMatrixFilter.Matrix">
            <summary>
            Gets the <see cref="T:System.Drawing.ColorMatrix"/> for this filter instance.
            </summary>
        </member>
        <member name="M:ImageProcessor.Imaging.Filters.IMatrixFilter.TransformImage(ImageProcessor.ImageFactory,System.Drawing.Image,System.Drawing.Image)">
            <summary>
            Processes the image.
            </summary>
            <param name="factory">
            The the current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class containing
            the image to process.
            </param>
            <param name="image">The current image to process</param>
            <param name="newImage">The new Image to return</param>
            <returns>
            The processed image from the current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class.
            </returns>
        </member>
        <member name="T:ImageProcessor.Imaging.ImageUtils">
            <summary>
            Encapsulates useful image utility methods.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.ImageUtils.FormatRegex">
            <summary>
            The image format regex.
            </summary>
        </member>
        <member name="M:ImageProcessor.Imaging.ImageUtils.GetResponseType(System.String)">
            <summary>
            Returns the correct response type based on the given request path.
            </summary>
            <param name="request">
            The request to match.
            </param>
            <returns>
            The correct <see cref="T:ImageProcessor.Imaging.ResponseType"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.ImageUtils.GetImageFormat(System.String)">
            <summary>
            Returns the correct image format based on the given file extension.
            </summary>
            <param name="fileName">The string containing the filename to check against.</param>
            <returns>The correct image format based on the given filename.</returns>
        </member>
        <member name="M:ImageProcessor.Imaging.ImageUtils.GetExtensionFromImageFormat(System.Drawing.Imaging.ImageFormat)">
            <summary>
            Returns the correct file extension for the given <see cref="T:System.Drawing.Imaging.ImageFormat"/>.
            </summary>
            <param name="imageFormat">
            The <see cref="T:System.Drawing.Imaging.ImageFormat"/> to return the extension for.
            </param>
            <returns>
            The correct file extension for the given <see cref="T:System.Drawing.Imaging.ImageFormat"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.ImageUtils.GetImageFormat(ImageProcessor.Imaging.ResponseType)">
            <summary>
            Returns the correct image format based on the given response type.
            </summary>
            <param name="responseType">
            The <see cref="T:ImageProcessor.Imaging.ResponseType"/> to check against.
            </param>
            <returns>The correct image format based on the given response type.</returns>
        </member>
        <member name="M:ImageProcessor.Imaging.ImageUtils.GetImageCodeInfo(System.String)">
            <summary>
            Returns the first ImageCodeInfo instance with the specified mime type. 
            </summary>
            <param name="mimeType">
            A string that contains the codec's Multipurpose Internet Mail Extensions (MIME) type.
            </param>
            <returns>
            The first ImageCodeInfo instance with the specified mime type. 
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.ImageUtils.GetEncodingParameters(System.Int32)">
            <summary>
            Returns an instance of EncodingParameters for jpeg compression. 
            </summary>
            <param name="quality">The quality to return the image at.</param>
            <returns>The encodingParameters for jpeg compression. </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.ImageUtils.IsValidImageExtension(System.String)">
            <summary>
            Checks a given string to check whether the value contains a valid image extension.
            </summary>
            <param name="fileName">The string containing the filename to check.</param>
            <returns>True the value contains a valid image extension, otherwise false.</returns>
        </member>
        <member name="M:ImageProcessor.Imaging.ImageUtils.IsIndexed(System.Drawing.Image)">
            <summary>Returns a value indicating whether or not the given bitmap is indexed.</summary>
            <param name="image">The image to check</param>
            <returns>Whether or not the given bitmap is indexed.</returns>
        </member>
        <member name="T:ImageProcessor.Imaging.ResponseType">
            <summary>
            Globally available enumeration which specifies the correct HTTP MIME type of
            the output stream for different response types.
            <para>
            http://en.wikipedia.org/wiki/Internet_media_type"/
            </para>
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.ResponseType.Bmp">
            <summary>
            The correct HTTP MIME type of the output stream for bmp images.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.ResponseType.Gif">
            <summary>
            The correct HTTP MIME type of the output stream for gif images.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.ResponseType.Jpeg">
            <summary>
            The correct HTTP MIME type of the output stream for jpeg images.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.ResponseType.Png">
            <summary>
            The correct HTTP MIME type of the output stream for png images.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.ResponseType.Svg">
            <summary>
            The correct HTTP MIME type of the output stream for svg images.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.ResponseType.Tiff">
            <summary>
            The correct HTTP MIME type of the output stream for tiff images.
            </summary>
        </member>
        <member name="T:ImageProcessor.Imaging.RotateLayer">
            <summary>
            Encapsulates the properties required to rotate an image.
            </summary>
        </member>
        <member name="M:ImageProcessor.Imaging.RotateLayer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Imaging.RotateLayer"/> class.
            </summary>
        </member>
        <member name="M:ImageProcessor.Imaging.RotateLayer.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Imaging.RotateLayer"/> class.
            </summary>
            <param name="angle">
            The angle at which to rotate the image.
            </param>
        </member>
        <member name="M:ImageProcessor.Imaging.RotateLayer.#ctor(System.Int32,System.Drawing.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Imaging.RotateLayer"/> class.
            </summary>
            <param name="angle">
            The angle at which to rotate the image.
            </param>
            <param name="backgroundColor">
            The <see cref="T:System.Drawing.Color"/> to set as the background color.
            <remarks>Used for image formats that do not support transparency</remarks>
            </param>
        </member>
        <member name="P:ImageProcessor.Imaging.RotateLayer.Angle">
            <summary>
            Gets or sets the angle at which to rotate the image.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.RotateLayer.BackgroundColor">
            <summary>
            Gets or sets the background color.
            </summary>
        </member>
        <member name="M:ImageProcessor.Imaging.RotateLayer.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether the specified object is an 
            <see cref="T:ImageProcessor.Imaging.RotateLayer"/> object that is equivalent to 
            this <see cref="T:ImageProcessor.Imaging.RotateLayer"/> object.
            </summary>
            <param name="obj">
            The object to test.
            </param>
            <returns>
            True if the given object  is an <see cref="T:ImageProcessor.Imaging.RotateLayer"/> object that is equivalent to 
            this <see cref="T:ImageProcessor.Imaging.RotateLayer"/> object; otherwise, false.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.RotateLayer.GetHashCode">
            <summary>
            Returns a hash code value that represents this object.
            </summary>
            <returns>
            A hash code that represents this object.
            </returns>
        </member>
        <member name="T:ImageProcessor.Imaging.RoundedCornerLayer">
            <summary>
            Encapsulates the properties required to add rounded corners to an image.
            </summary>
        </member>
        <member name="M:ImageProcessor.Imaging.RoundedCornerLayer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Imaging.RoundedCornerLayer"/> class.
            </summary>
        </member>
        <member name="M:ImageProcessor.Imaging.RoundedCornerLayer.#ctor(System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Imaging.RoundedCornerLayer"/> class.
            </summary>
            <param name="radius">
            The radius at which the corner will be done.
            </param>
            <param name="topLeft">
            Set if top left is rounded
            </param>
            <param name="topRight">
            Set if top right is rounded
            </param>
            <param name="bottomLeft">
            Set if bottom left is rounded
            </param>
            <param name="bottomRight">
            Set if bottom right is rounded
            </param>
        </member>
        <member name="M:ImageProcessor.Imaging.RoundedCornerLayer.#ctor(System.Int32,System.Drawing.Color,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Imaging.RoundedCornerLayer"/> class.
            </summary>
            <param name="radius">
            The radius at which the corner will be done.
            </param>
            <param name="backgroundColor">
            The <see cref="T:System.Drawing.Color"/> to set as the background color.
            <remarks>Used for image formats that do not support transparency</remarks>
            </param>
            <param name="topLeft">
            Set if top left is rounded
            </param>
            <param name="topRight">
            Set if top right is rounded
            </param>
            <param name="bottomLeft">
            Set if bottom left is rounded
            </param>
            <param name="bottomRight">
            Set if bottom right is rounded
            </param>
        </member>
        <member name="P:ImageProcessor.Imaging.RoundedCornerLayer.Radius">
            <summary>
            Gets or sets the radius of the corners.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.RoundedCornerLayer.BackgroundColor">
            <summary>
            Gets or sets the background color.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.RoundedCornerLayer.TopLeft">
            <summary>
            Gets or sets a value indicating whether top left corners are to be added.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.RoundedCornerLayer.TopRight">
            <summary>
            Gets or sets a value indicating whether top right corners are to be added.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.RoundedCornerLayer.BottomLeft">
            <summary>
            Gets or sets a value indicating whether bottom left corners are to be added.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.RoundedCornerLayer.BottomRight">
            <summary>
            Gets or sets a value indicating whether bottom right corners are to be added.
            </summary>
        </member>
        <member name="M:ImageProcessor.Imaging.RoundedCornerLayer.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether the specified object is an 
            <see cref="T:ImageProcessor.Imaging.RoundedCornerLayer"/> object that is equivalent to 
            this <see cref="T:ImageProcessor.Imaging.RoundedCornerLayer"/> object.
            </summary>
            <param name="obj">
            The object to test.
            </param>
            <returns>
            True if the given object is an <see cref="T:ImageProcessor.Imaging.RoundedCornerLayer"/> object that is equivalent to 
            this <see cref="T:ImageProcessor.Imaging.RoundedCornerLayer"/> object; otherwise, false.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.RoundedCornerLayer.GetHashCode">
            <summary>
            Returns a hash code value that represents this object.
            </summary>
            <returns>
            A hash code that represents this object.
            </returns>
        </member>
        <member name="T:ImageProcessor.Imaging.TextLayer">
            <summary>
            Encapsulates the properties required to add a layer of text to an image.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.TextLayer.textColor">
            <summary>
            The colour to render the text.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.TextLayer.opacity">
            <summary>
            The opacity at which to render the text.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.TextLayer.fontStyle">
            <summary>
            The font style to render the text.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.TextLayer.fontSize">
            <summary>
            The font size to render the text.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.TextLayer.position">
            <summary>
            The position to start creating the text from.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.TextLayer.Text">
            <summary>
            Gets or sets Text.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.TextLayer.TextColor">
            <summary>
            Gets or sets the Color to render the font.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.TextLayer.Font">
            <summary>
            Gets or sets the name of the font.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.TextLayer.FontSize">
            <summary>
            Gets or sets the size of the font in pixels.
            </summary>  
        </member>
        <member name="P:ImageProcessor.Imaging.TextLayer.Style">
            <summary>
            Gets or sets the FontStyle of the textlayer.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.TextLayer.Opacity">
            <summary>
            Gets or sets the Opacity of the textlayer.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.TextLayer.Position">
            <summary>
            Gets or sets the Position of the textlayer.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.TextLayer.DropShadow">
            <summary>
            Gets or sets a value indicating whether a DropShadow should be drawn.
            </summary>
        </member>
        <member name="T:ImageProcessor.Processors.Alpha">
            <summary>
            Encapsulates methods to change the alpha component of the image to effect its transparency.
            </summary>
        </member>
        <member name="F:ImageProcessor.Processors.Alpha.QueryRegex">
            <summary>
            The regular expression to search strings for.
            <see cref="!:http://stackoverflow.com/a/6400969/427899"/> 
            </summary>
        </member>
        <member name="P:ImageProcessor.Processors.Alpha.RegexPattern">
            <summary>
            Gets the regular expression to search strings for.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processors.Alpha.DynamicParameter">
            <summary>
            Gets or sets DynamicParameter.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processors.Alpha.SortOrder">
            <summary>
            Gets the order in which this processor is to be used in a chain.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processors.Alpha.Settings">
            <summary>
            Gets or sets any additional settings required by the processor.
            </summary>
        </member>
        <member name="M:ImageProcessor.Processors.Alpha.MatchRegexIndex(System.String)">
            <summary>
            The position in the original string where the first character of the captured substring was found.
            </summary>
            <param name="queryString">
            The query string to search.
            </param>
            <returns>
            The zero-based starting position in the original string where the captured substring was found.
            </returns>
        </member>
        <member name="M:ImageProcessor.Processors.Alpha.ProcessImage(ImageProcessor.ImageFactory)">
            <summary>
            Processes the image.
            </summary>
            <param name="factory">
            The the current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class containing
            the image to process.
            </param>
            <returns>
            The processed image from the current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class.
            </returns>
        </member>
        <member name="T:ImageProcessor.Processors.Brightness">
            <summary>
            Encapsulates methods to change the brightness component of the image.
            </summary>
        </member>
        <member name="F:ImageProcessor.Processors.Brightness.QueryRegex">
            <summary>
            The regular expression to search strings for.
            <see cref="!:http://stackoverflow.com/a/6400969/427899"/> 
            </summary>
        </member>
        <member name="P:ImageProcessor.Processors.Brightness.RegexPattern">
            <summary>
            Gets the regular expression to search strings for.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processors.Brightness.DynamicParameter">
            <summary>
            Gets or sets DynamicParameter.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processors.Brightness.SortOrder">
            <summary>
            Gets the order in which this processor is to be used in a chain.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processors.Brightness.Settings">
            <summary>
            Gets or sets any additional settings required by the processor.
            </summary>
        </member>
        <member name="M:ImageProcessor.Processors.Brightness.MatchRegexIndex(System.String)">
            <summary>
            The position in the original string where the first character of the captured substring was found.
            </summary>
            <param name="queryString">
            The query string to search.
            </param>
            <returns>
            The zero-based starting position in the original string where the captured substring was found.
            </returns>
        </member>
        <member name="M:ImageProcessor.Processors.Brightness.ProcessImage(ImageProcessor.ImageFactory)">
            <summary>
            Processes the image.
            </summary>
            <param name="factory">
            The the current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class containing
            the image to process.
            </param>
            <returns>
            The processed image from the current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class.
            </returns>
        </member>
        <member name="T:ImageProcessor.Processors.Contrast">
            <summary>
            Encapsulates methods to change the contrast component of the image.
            </summary>
        </member>
        <member name="F:ImageProcessor.Processors.Contrast.QueryRegex">
            <summary>
            The regular expression to search strings for.
            <see cref="!:http://stackoverflow.com/a/6400969/427899"/> 
            </summary>
        </member>
        <member name="P:ImageProcessor.Processors.Contrast.RegexPattern">
            <summary>
            Gets the regular expression to search strings for.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processors.Contrast.DynamicParameter">
            <summary>
            Gets or sets DynamicParameter.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processors.Contrast.SortOrder">
            <summary>
            Gets the order in which this processor is to be used in a chain.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processors.Contrast.Settings">
            <summary>
            Gets or sets any additional settings required by the processor.
            </summary>
        </member>
        <member name="M:ImageProcessor.Processors.Contrast.MatchRegexIndex(System.String)">
            <summary>
            The position in the original string where the first character of the captured substring was found.
            </summary>
            <param name="queryString">
            The query string to search.
            </param>
            <returns>
            The zero-based starting position in the original string where the captured substring was found.
            </returns>
        </member>
        <member name="M:ImageProcessor.Processors.Contrast.ProcessImage(ImageProcessor.ImageFactory)">
            <summary>
            Processes the image.
            </summary>
            <param name="factory">
            The the current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class containing
            the image to process.
            </param>
            <returns>
            The processed image from the current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class.
            </returns>
        </member>
        <member name="T:ImageProcessor.Processors.RoundedCorners">
            <summary>
            Encapsulates methods to add rounded corners to an image.
            </summary>
        </member>
        <member name="F:ImageProcessor.Processors.RoundedCorners.QueryRegex">
            <summary>
            The regular expression to search strings for.
            </summary>
        </member>
        <member name="F:ImageProcessor.Processors.RoundedCorners.RadiusRegex">
            <summary>
            The regular expression to search strings for the angle attribute.
            </summary>
        </member>
        <member name="F:ImageProcessor.Processors.RoundedCorners.ColorRegex">
            <summary>
            The regular expression to search strings for the color attribute.
            </summary>
        </member>
        <member name="F:ImageProcessor.Processors.RoundedCorners.TopLeftRegex">
            <summary>
            The regular expression to search strings for the top left attribute.
            </summary>
        </member>
        <member name="F:ImageProcessor.Processors.RoundedCorners.TopRightRegex">
            <summary>
            The regular expression to search strings for the top right attribute.
            </summary>
        </member>
        <member name="F:ImageProcessor.Processors.RoundedCorners.BottomLeftRegex">
            <summary>
            The regular expression to search strings for the bottom left attribute.
            </summary>
        </member>
        <member name="F:ImageProcessor.Processors.RoundedCorners.BottomRightRegex">
            <summary>
            The regular expression to search strings for the bottom right attribute.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processors.RoundedCorners.RegexPattern">
            <summary>
            Gets the regular expression to search strings for.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processors.RoundedCorners.DynamicParameter">
            <summary>
            Gets or sets DynamicParameter.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processors.RoundedCorners.SortOrder">
            <summary>
            Gets the order in which this processor is to be used in a chain.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processors.RoundedCorners.Settings">
            <summary>
            Gets or sets any additional settings required by the processor.
            </summary>
        </member>
        <member name="M:ImageProcessor.Processors.RoundedCorners.MatchRegexIndex(System.String)">
            <summary>
            The position in the original string where the first character of the captured substring was found.
            </summary>
            <param name="queryString">
            The query string to search.
            </param>
            <returns>
            The zero-based starting position in the original string where the captured substring was found.
            </returns>
        </member>
        <member name="M:ImageProcessor.Processors.RoundedCorners.ProcessImage(ImageProcessor.ImageFactory)">
            <summary>
            Processes the image.
            </summary>
            <param name="factory">
            The the current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class containing
            the image to process.
            </param>
            <returns>
            The processed image from the current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class.
            </returns>
        </member>
        <member name="M:ImageProcessor.Processors.RoundedCorners.RoundCornerImage(System.Drawing.Image,System.Int32,System.Drawing.Color,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Adds rounded corners to the image
            </summary>
            <param name="image">The image to add corners too</param>
            <param name="cornerRadius">The radius of the corners.</param>
            <param name="backgroundColor">The background color to fill an image with.</param>
            <param name="topLeft">If the top left corner will have a rounded corner?</param>
            <param name="topRight">If the top right corner will have a rounded corner?</param>
            <param name="bottomLeft">If the bottom left corner will have a rounded corner?</param>
            <param name="bottomRight">If the bottom right corner will have a rounded corner?</param>
            <returns>The image with rounded corners.</returns>
        </member>
        <member name="M:ImageProcessor.Processors.RoundedCorners.ParseRadius(System.String)">
            <summary>
            Returns the correct <see cref="T:System.Int32"/> containing the radius for the given string.
            </summary>
            <param name="input">
            The input string containing the value to parse.
            </param>
            <returns>
            The correct <see cref="T:System.Int32"/> containing the radius for the given string.
            </returns>
        </member>
        <member name="M:ImageProcessor.Processors.RoundedCorners.ParseColor(System.String)">
            <summary>
            Returns the correct <see cref="T:System.Drawing.Color"/> for the given string.
            </summary>
            <param name="input">
            The input string containing the value to parse.
            </param>
            <returns>
            The correct <see cref="T:System.Drawing.Color"/>
            </returns>
        </member>
        <member name="M:ImageProcessor.Processors.RoundedCorners.ParseCorner(System.Text.RegularExpressions.Regex,System.String)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> either true or false.
            </summary>
            <param name="corner">
            The corner.
            </param>
            <param name="input">
            The input string containing the value to parse.
            </param>
            <returns>
            The correct <see cref="T:System.Boolean"/> true or false.
            </returns>
        </member>
        <member name="T:ImageProcessor.Processors.Saturation">
            <summary>
            Encapsulates methods to change the saturation component of the image.
            </summary>
            <remarks>
            <see cref="!:http://www.bobpowell.net/imagesaturation.htm"/> 
            </remarks>
        </member>
        <member name="F:ImageProcessor.Processors.Saturation.QueryRegex">
            <summary>
            The regular expression to search strings for.
            <see cref="!:http://stackoverflow.com/a/6400969/427899"/> 
            </summary>
        </member>
        <member name="P:ImageProcessor.Processors.Saturation.RegexPattern">
            <summary>
            Gets the regular expression to search strings for.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processors.Saturation.DynamicParameter">
            <summary>
            Gets or sets DynamicParameter.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processors.Saturation.SortOrder">
            <summary>
            Gets the order in which this processor is to be used in a chain.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processors.Saturation.Settings">
            <summary>
            Gets or sets any additional settings required by the processor.
            </summary>
        </member>
        <member name="M:ImageProcessor.Processors.Saturation.MatchRegexIndex(System.String)">
            <summary>
            The position in the original string where the first character of the captured substring was found.
            </summary>
            <param name="queryString">
            The query string to search.
            </param>
            <returns>
            The zero-based starting position in the original string where the captured substring was found.
            </returns>
        </member>
        <member name="M:ImageProcessor.Processors.Saturation.ProcessImage(ImageProcessor.ImageFactory)">
            <summary>
            Processes the image.
            </summary>
            <param name="factory">
            The the current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class containing
            the image to process.
            </param>
            <returns>
            The processed image from the current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class.
            </returns>
        </member>
        <member name="T:ImageProcessor.Processors.Flip">
            <summary>
            Flips an image horizontally or vertically.
            </summary>
        </member>
        <member name="F:ImageProcessor.Processors.Flip.QueryRegex">
            <summary>
            The regular expression to search strings for.
            <see cref="!:http://stackoverflow.com/a/6400969/427899"/>
            </summary>
        </member>
        <member name="P:ImageProcessor.Processors.Flip.RegexPattern">
            <summary>
            Gets the regular expression to search strings for.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processors.Flip.DynamicParameter">
            <summary>
            Gets or sets DynamicParameter.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processors.Flip.SortOrder">
            <summary>
            Gets the order in which this processor is to be used in a chain.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processors.Flip.Settings">
            <summary>
            Gets or sets any additional settings required by the processor.
            </summary>
        </member>
        <member name="M:ImageProcessor.Processors.Flip.MatchRegexIndex(System.String)">
            <summary>
            The position in the original string where the first character of the captured substring was found.
            </summary>
            <param name="queryString">
            The query string to search.
            </param>
            <returns>
            The zero-based starting position in the original string where the captured substring was found.
            </returns>
        </member>
        <member name="M:ImageProcessor.Processors.Flip.ProcessImage(ImageProcessor.ImageFactory)">
            <summary>
            Processes the image.
            </summary>
            <param name="factory">
            The the current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class containing
            the image to process.
            </param>
            <returns>
            The processed image from the current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class.
            </returns>
        </member>
        <member name="T:ImageProcessor.Processors.Rotate">
            <summary>
            Encapsulates methods to rotate an image.
            </summary>
        </member>
        <member name="F:ImageProcessor.Processors.Rotate.QueryRegex">
            <summary>
            The regular expression to search strings for.
            </summary>
        </member>
        <member name="F:ImageProcessor.Processors.Rotate.AngleRegex">
            <summary>
            The regular expression to search strings for the angle attribute.
            </summary>
        </member>
        <member name="F:ImageProcessor.Processors.Rotate.ColorRegex">
            <summary>
            The regular expression to search strings for the color attribute.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processors.Rotate.RegexPattern">
            <summary>
            Gets the regular expression to search strings for.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processors.Rotate.DynamicParameter">
            <summary>
            Gets or sets DynamicParameter.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processors.Rotate.SortOrder">
            <summary>
            Gets the order in which this processor is to be used in a chain.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processors.Rotate.Settings">
            <summary>
            Gets or sets any additional settings required by the processor.
            </summary>
        </member>
        <member name="M:ImageProcessor.Processors.Rotate.MatchRegexIndex(System.String)">
            <summary>
            The position in the original string where the first character of the captured substring was found.
            </summary>
            <param name="queryString">
            The query string to search.
            </param>
            <returns>
            The zero-based starting position in the original string where the captured substring was found.
            </returns>
        </member>
        <member name="M:ImageProcessor.Processors.Rotate.ProcessImage(ImageProcessor.ImageFactory)">
            <summary>
            Processes the image.
            </summary>
            <param name="factory">
            The the current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class containing
            the image to process.
            </param>
            <returns>
            The processed image from the current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class.
            </returns>
        </member>
        <member name="M:ImageProcessor.Processors.Rotate.RotateImage(System.Drawing.Image,System.Single,System.Single,System.Single,System.Drawing.Color)">
            <summary>
            Rotates an image to the given angle at the given position.
            </summary>
            <param name="image">The image to rotate</param>
            <param name="rotateAtX">The horizontal pixel coordinate at which to rotate the image.</param>
            <param name="rotateAtY">The vertical pixel coordinate at which to rotate the image.</param>
            <param name="angle">The angle in degrees at which to rotate the image.</param>
            <param name="backgroundColor">The background color to fill an image with.</param>
            <returns>The image rotated to the given angle at the given position.</returns>
            <remarks> 
            Based on <see cref="!:http://www.codeproject.com/Articles/58815/C-Image-PictureBox-Rotations?msg=4155374#xx4155374xx"/> 
            </remarks>
        </member>
        <member name="M:ImageProcessor.Processors.Rotate.ParseAngle(System.String)">
            <summary>
            Returns the correct <see cref="T:System.Int32"/> containing the angle for the given string.
            </summary>
            <param name="input">
            The input string containing the value to parse.
            </param>
            <returns>
            The correct <see cref="T:System.Int32"/> containing the angle for the given string.
            </returns>
        </member>
        <member name="M:ImageProcessor.Processors.Rotate.ParseColor(System.String)">
            <summary>
            Returns the correct <see cref="T:System.Drawing.Color"/> for the given string.
            </summary>
            <param name="input">
            The input string containing the value to parse.
            </param>
            <returns>
            The correct <see cref="T:System.Drawing.Color"/>
            </returns>
        </member>
        <member name="T:ImageProcessor.Processors.Crop">
            <summary>
            Crops an image to the given directions.
            </summary>
        </member>
        <member name="F:ImageProcessor.Processors.Crop.QueryRegex">
            <summary>
            The regular expression to search strings for.
            <see cref="!:http://stackoverflow.com/a/6400969/427899"/>
            </summary>
        </member>
        <member name="P:ImageProcessor.Processors.Crop.RegexPattern">
            <summary>
            Gets the regular expression to search strings for.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processors.Crop.DynamicParameter">
            <summary>
            Gets or sets DynamicParameter.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processors.Crop.SortOrder">
            <summary>
            Gets the order in which this processor is to be used in a chain.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processors.Crop.Settings">
            <summary>
            Gets or sets any additional settings required by the processor.
            </summary>
        </member>
        <member name="M:ImageProcessor.Processors.Crop.MatchRegexIndex(System.String)">
            <summary>
            The position in the original string where the first character of the captured substring was found.
            </summary>
            <param name="queryString">
            The query string to search.
            </param>
            <returns>
            The zero-based starting position in the original string where the captured substring was found.
            </returns>
        </member>
        <member name="M:ImageProcessor.Processors.Crop.ProcessImage(ImageProcessor.ImageFactory)">
            <summary>
            Processes the image.
            </summary>
            <param name="factory">
            The the current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class containing
            the image to process.
            </param>
            <returns>
            The processed image from the current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class.
            </returns>
        </member>
        <member name="T:ImageProcessor.Processors.Filter">
            <summary>
            Encapsulates methods with which to add filters to an image.
            </summary>
        </member>
        <member name="F:ImageProcessor.Processors.Filter.QueryRegex">
            <summary>
            The regular expression to search strings for.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processors.Filter.RegexPattern">
            <summary>
            Gets the regular expression to search strings for.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processors.Filter.DynamicParameter">
            <summary>
            Gets or sets DynamicParameter.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processors.Filter.SortOrder">
            <summary>
            Gets the order in which this processor is to be used in a chain.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processors.Filter.Settings">
            <summary>
            Gets or sets any additional settings required by the processor.
            </summary>
        </member>
        <member name="M:ImageProcessor.Processors.Filter.MatchRegexIndex(System.String)">
            <summary>
            The position in the original string where the first character of the captured substring was found.
            </summary>
            <param name="queryString">
            The query string to search.
            </param>
            <returns>
            The zero-based starting position in the original string where the captured substring was found.
            </returns>
        </member>
        <member name="M:ImageProcessor.Processors.Filter.ProcessImage(ImageProcessor.ImageFactory)">
            <summary>
            Processes the image.
            </summary>
            <param name="factory">
            The the current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class containing
            the image to process.
            </param>
            <returns>
            The processed image from the current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class.
            </returns>
        </member>
        <member name="T:ImageProcessor.Processors.IGraphicsProcessor">
            <summary>
            Defines properties and methods for ImageProcessor Plugins.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processors.IGraphicsProcessor.RegexPattern">
            <summary>
            Gets the regular expression to search strings for.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processors.IGraphicsProcessor.DynamicParameter">
            <summary>
            Gets DynamicParameter.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processors.IGraphicsProcessor.SortOrder">
            <summary>
            Gets the order in which this processor is to be used in a chain.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processors.IGraphicsProcessor.Settings">
            <summary>
            Gets or sets any additional settings required by the processor.
            </summary>
        </member>
        <member name="M:ImageProcessor.Processors.IGraphicsProcessor.MatchRegexIndex(System.String)">
            <summary>
            The position in the original string where the first character of the captured substring was found.
            </summary>
            <param name="queryString">
            The query string to search.
            </param>
            <returns>
            The zero-based starting position in the original string where the captured substring was found.
            </returns>
        </member>
        <member name="M:ImageProcessor.Processors.IGraphicsProcessor.ProcessImage(ImageProcessor.ImageFactory)">
            <summary>
            Processes the image.
            </summary>
            <param name="factory">
            The the current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class containing
            the image to process.
            </param>
            <returns>
            The processed image from the current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class.
            </returns>
        </member>
        <member name="T:ImageProcessor.Processors.Quality">
            <summary>
            TODO: Update summary.
            </summary>
        </member>
        <member name="F:ImageProcessor.Processors.Quality.QueryRegex">
            <summary>
            The regular expression to search strings for.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processors.Quality.RegexPattern">
            <summary>
            Gets the regular expression to search strings for.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processors.Quality.DynamicParameter">
            <summary>
            Gets or sets DynamicParameter.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processors.Quality.SortOrder">
            <summary>
            Gets the order in which this processor is to be used in a chain.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processors.Quality.Settings">
            <summary>
            Gets or sets any additional settings required by the processor.
            </summary>
        </member>
        <member name="M:ImageProcessor.Processors.Quality.MatchRegexIndex(System.String)">
            <summary>
            The position in the original string where the first character of the captured substring was found.
            </summary>
            <param name="queryString">
            The query string to search.
            </param>
            <returns>
            The zero-based starting position in the original string where the captured substring was found.
            </returns>
        </member>
        <member name="M:ImageProcessor.Processors.Quality.ProcessImage(ImageProcessor.ImageFactory)">
            <summary>
            Processes the image.
            </summary>
            <param name="factory">
            The the current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class containing
            the image to process.
            </param>
            <returns>
            The processed image from the current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class.
            </returns>
        </member>
        <member name="T:ImageProcessor.Processors.Resize">
            <summary>
            Resizes an image to the given dimensions.
            </summary>
        </member>
        <member name="F:ImageProcessor.Processors.Resize.QueryRegex">
            <summary>
            The regular expression to search strings for.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processors.Resize.RegexPattern">
            <summary>
            Gets the regular expression to search strings for.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processors.Resize.DynamicParameter">
            <summary>
            Gets or sets DynamicParameter.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processors.Resize.SortOrder">
            <summary>
            Gets the order in which this processor is to be used in a chain.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processors.Resize.Settings">
            <summary>
            Gets or sets any additional settings required by the processor.
            </summary>
        </member>
        <member name="M:ImageProcessor.Processors.Resize.MatchRegexIndex(System.String)">
            <summary>
            The position in the original string where the first character of the captured substring was found.
            </summary>
            <param name="queryString">
            The query string to search.
            </param>
            <returns>
            The zero-based starting position in the original string where the captured substring was found.
            </returns>
        </member>
        <member name="M:ImageProcessor.Processors.Resize.ProcessImage(ImageProcessor.ImageFactory)">
            <summary>
            Processes the image.
            </summary>
            <param name="factory">
            The the current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class containing
            the image to process.
            </param>
            <returns>
            The processed image from the current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class.
            </returns>
        </member>
        <member name="T:ImageProcessor.Processors.Format">
            <summary>
            Sets the output of the image to a specific format.
            </summary>
        </member>
        <member name="F:ImageProcessor.Processors.Format.QueryRegex">
            <summary>
            The regular expression to search strings for.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processors.Format.RegexPattern">
            <summary>
            Gets the regular expression to search strings for.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processors.Format.DynamicParameter">
            <summary>
            Gets or sets DynamicParameter.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processors.Format.SortOrder">
            <summary>
            Gets the order in which this processor is to be used in a chain.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processors.Format.Settings">
            <summary>
            Gets or sets any additional settings required by the processor.
            </summary>
        </member>
        <member name="M:ImageProcessor.Processors.Format.MatchRegexIndex(System.String)">
            <summary>
            The position in the original string where the first character of the captured substring was found.
            </summary>
            <param name="queryString">
            The query string to search.
            </param>
            <returns>
            The zero-based starting position in the original string where the captured substring was found.
            </returns>
        </member>
        <member name="M:ImageProcessor.Processors.Format.ProcessImage(ImageProcessor.ImageFactory)">
            <summary>
            Processes the image.
            </summary>
            <param name="factory">
            The the current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class containing
            the image to process.
            </param>
            <returns>
            The processed image from the current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class.
            </returns>
        </member>
        <member name="T:ImageProcessor.Processors.Vignette">
            <summary>
            Encapsulates methods with which to add a vignette image effect to an image.
            </summary>
        </member>
        <member name="F:ImageProcessor.Processors.Vignette.QueryRegex">
            <summary>
            The regular expression to search strings for.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processors.Vignette.RegexPattern">
            <summary>
            Gets the regular expression to search strings for.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processors.Vignette.DynamicParameter">
            <summary>
            Gets or sets DynamicParameter.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processors.Vignette.SortOrder">
            <summary>
            Gets the order in which this processor is to be used in a chain.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processors.Vignette.Settings">
            <summary>
            Gets or sets any additional settings required by the processor.
            </summary>
        </member>
        <member name="M:ImageProcessor.Processors.Vignette.MatchRegexIndex(System.String)">
            <summary>
            The position in the original string where the first character of the captured substring was found.
            </summary>
            <param name="queryString">
            The query string to search.
            </param>
            <returns>
            The zero-based starting position in the original string where the captured substring was found.
            </returns>
        </member>
        <member name="M:ImageProcessor.Processors.Vignette.ProcessImage(ImageProcessor.ImageFactory)">
            <summary>
            Processes the image.
            </summary>
            <param name="factory">
            The the current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class containing
            the image to process.
            </param>
            <returns>
            The processed image from the current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class.
            </returns>
        </member>
        <member name="T:ImageProcessor.Processors.Watermark">
            <summary>
            Encapsulates methods to change the alpha component of the image to effect its transparency.
            </summary>
        </member>
        <member name="F:ImageProcessor.Processors.Watermark.QueryRegex">
            <summary>
            The regular expression to search strings for.
            </summary>
        </member>
        <member name="F:ImageProcessor.Processors.Watermark.TextRegex">
            <summary>
            The regular expression to search strings for the text attribute.
            </summary>
        </member>
        <member name="F:ImageProcessor.Processors.Watermark.PositionRegex">
            <summary>
            The regular expression to search strings for the position attribute.
            </summary>
        </member>
        <member name="F:ImageProcessor.Processors.Watermark.ColorRegex">
            <summary>
            The regular expression to search strings for the color attribute.
            </summary>
        </member>
        <member name="F:ImageProcessor.Processors.Watermark.FontSizeRegex">
            <summary>
            The regular expression to search strings for the font size attribute.
            </summary>
        </member>
        <member name="F:ImageProcessor.Processors.Watermark.FontStyleRegex">
            <summary>
            The regular expression to search strings for the font style attribute.
            </summary>
        </member>
        <member name="F:ImageProcessor.Processors.Watermark.FontFamilyRegex">
            <summary>
            The regular expression to search strings for the font family attribute.
            </summary>
        </member>
        <member name="F:ImageProcessor.Processors.Watermark.OpacityRegex">
            <summary>
            The regular expression to search strings for the opacity attribute.
            </summary>
        </member>
        <member name="F:ImageProcessor.Processors.Watermark.ShadowRegex">
            <summary>
            The regular expression to search strings for the shadow attribute.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processors.Watermark.RegexPattern">
            <summary>
            Gets the regular expression to search strings for.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processors.Watermark.DynamicParameter">
            <summary>
            Gets or sets DynamicParameter.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processors.Watermark.SortOrder">
            <summary>
            Gets the order in which this processor is to be used in a chain.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processors.Watermark.Settings">
            <summary>
            Gets or sets any additional settings required by the processor.
            </summary>
        </member>
        <member name="M:ImageProcessor.Processors.Watermark.MatchRegexIndex(System.String)">
            <summary>
            The position in the original string where the first character of the captured substring was found.
            </summary>
            <param name="queryString">
            The query string to search.
            </param>
            <returns>
            The zero-based starting position in the original string where the captured substring was found.
            </returns>
        </member>
        <member name="M:ImageProcessor.Processors.Watermark.ProcessImage(ImageProcessor.ImageFactory)">
            <summary>
            Processes the image.
            </summary>
            <param name="factory">
            The the current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class containing
            the image to process.
            </param>
            <returns>
            The processed image from the current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class.
            </returns>
        </member>
        <member name="M:ImageProcessor.Processors.Watermark.GetFont(System.String,System.Int32,System.Drawing.FontStyle)">
            <summary>
            Returns the correct <see cref="T:System.Drawing.Font"/> for the given parameters
            </summary>
            <param name="font">
            The font.
            </param>
            <param name="fontSize">
            The font size.
            </param>
            <param name="fontStyle">
            The font style.
            </param>
            <returns>
            The correct <see cref="T:System.Drawing.Font"/>
            </returns>
        </member>
        <member name="M:ImageProcessor.Processors.Watermark.ParseText(System.String)">
            <summary>
            Returns the correct <see cref="T:System.String"/> for the given string.
            </summary>
            <param name="input">
            The input string containing the value to parse.
            </param>
            <returns>
            The correct <see cref="T:System.String"/> for the given string.
            </returns>
        </member>
        <member name="M:ImageProcessor.Processors.Watermark.ParsePosition(System.String)">
            <summary>
            Returns the correct <see cref="T:System.Drawing.Point"/> for the given string.
            </summary>
            <param name="input">
            The input string containing the value to parse.
            </param>
            <returns>
            The correct <see cref="T:System.Drawing.Point"/>
            </returns>
        </member>
        <member name="M:ImageProcessor.Processors.Watermark.ParseColor(System.String)">
            <summary>
            Returns the correct <see cref="T:System.Drawing.Color"/> for the given string.
            </summary>
            <param name="input">
            The input string containing the value to parse.
            </param>
            <returns>
            The correct <see cref="T:System.Drawing.Color"/>
            </returns>
        </member>
        <member name="M:ImageProcessor.Processors.Watermark.ParseFontSize(System.String)">
            <summary>
            Returns the correct <see cref="T:System.Int32"/> for the given string.
            </summary>
            <param name="input">
            The input string containing the value to parse.
            </param>
            <returns>
            The correct <see cref="T:System.Int32"/>
            </returns>
        </member>
        <member name="M:ImageProcessor.Processors.Watermark.ParseFontStyle(System.String)">
            <summary>
            Returns the correct <see cref="T:System.Drawing.FontStyle"/> for the given string.
            </summary>
            <param name="input">
            The string containing the respective font style.
            </param>
            <returns>
            The correct <see cref="T:System.Drawing.FontStyle"/>
            </returns>
        </member>
        <member name="M:ImageProcessor.Processors.Watermark.ParseFontFamily(System.String)">
            <summary>
            Returns the correct <see cref="T:System.String"/> containing the font family for the given string.
            </summary>
            <param name="input">
            The input string containing the value to parse.
            </param>
            <returns>
            The correct <see cref="T:System.String"/> containing the font family for the given string.
            </returns>
        </member>
        <member name="M:ImageProcessor.Processors.Watermark.ParseOpacity(System.String)">
            <summary>
            Returns the correct <see cref="T:System.Int32"/> containing the opacity for the given string.
            </summary>
            <param name="input">
            The input string containing the value to parse.
            </param>
            <returns>
            The correct <see cref="T:System.Int32"/> containing the opacity for the given string.
            </returns>
        </member>
        <member name="M:ImageProcessor.Processors.Watermark.ParseDropShadow(System.String)">
            <summary>
            Returns a value indicating whether the watermark is to have a shadow.
            </summary>
            <param name="input">
            The input string containing the value to parse.
            </param>
            <returns>
            The true if the watermark is to have a shadow; otherwise false.
            </returns>
        </member>
    </members>
</doc>
