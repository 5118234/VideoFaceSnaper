//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace MsFaceSDK.FaceService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CompareFaces", Namespace="http://schemas.datacontract.org/2004/07/FaceSDKService")]
    [System.SerializableAttribute()]
    public partial class CompareFaces : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float ConfidenceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IDcardField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] PdbPhotoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] PhotoFeatureField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] SourcePhotoField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float Confidence {
            get {
                return this.ConfidenceField;
            }
            set {
                if ((this.ConfidenceField.Equals(value) != true)) {
                    this.ConfidenceField = value;
                    this.RaisePropertyChanged("Confidence");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IDcard {
            get {
                return this.IDcardField;
            }
            set {
                if ((object.ReferenceEquals(this.IDcardField, value) != true)) {
                    this.IDcardField = value;
                    this.RaisePropertyChanged("IDcard");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] PdbPhoto {
            get {
                return this.PdbPhotoField;
            }
            set {
                if ((object.ReferenceEquals(this.PdbPhotoField, value) != true)) {
                    this.PdbPhotoField = value;
                    this.RaisePropertyChanged("PdbPhoto");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] PhotoFeature {
            get {
                return this.PhotoFeatureField;
            }
            set {
                if ((object.ReferenceEquals(this.PhotoFeatureField, value) != true)) {
                    this.PhotoFeatureField = value;
                    this.RaisePropertyChanged("PhotoFeature");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] SourcePhoto {
            get {
                return this.SourcePhotoField;
            }
            set {
                if ((object.ReferenceEquals(this.SourcePhotoField, value) != true)) {
                    this.SourcePhotoField = value;
                    this.RaisePropertyChanged("SourcePhoto");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FaceKafka", Namespace="http://schemas.datacontract.org/2004/07/FaceSDKService")]
    [System.SerializableAttribute()]
    public partial class FaceKafka : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MsFaceSDK.FaceService.KafkaCompare[] KafkaFacesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SourcePhotoField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Code {
            get {
                return this.CodeField;
            }
            set {
                if ((object.ReferenceEquals(this.CodeField, value) != true)) {
                    this.CodeField = value;
                    this.RaisePropertyChanged("Code");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MsFaceSDK.FaceService.KafkaCompare[] KafkaFaces {
            get {
                return this.KafkaFacesField;
            }
            set {
                if ((object.ReferenceEquals(this.KafkaFacesField, value) != true)) {
                    this.KafkaFacesField = value;
                    this.RaisePropertyChanged("KafkaFaces");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SourcePhoto {
            get {
                return this.SourcePhotoField;
            }
            set {
                if ((object.ReferenceEquals(this.SourcePhotoField, value) != true)) {
                    this.SourcePhotoField = value;
                    this.RaisePropertyChanged("SourcePhoto");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="KafkaCompare", Namespace="http://schemas.datacontract.org/2004/07/FaceSDKService")]
    [System.SerializableAttribute()]
    public partial class KafkaCompare : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ConfidenceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IDcardField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PdbPhotoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SourcePhotoRectField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Confidence {
            get {
                return this.ConfidenceField;
            }
            set {
                if ((object.ReferenceEquals(this.ConfidenceField, value) != true)) {
                    this.ConfidenceField = value;
                    this.RaisePropertyChanged("Confidence");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IDcard {
            get {
                return this.IDcardField;
            }
            set {
                if ((object.ReferenceEquals(this.IDcardField, value) != true)) {
                    this.IDcardField = value;
                    this.RaisePropertyChanged("IDcard");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PdbPhoto {
            get {
                return this.PdbPhotoField;
            }
            set {
                if ((object.ReferenceEquals(this.PdbPhotoField, value) != true)) {
                    this.PdbPhotoField = value;
                    this.RaisePropertyChanged("PdbPhoto");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SourcePhotoRect {
            get {
                return this.SourcePhotoRectField;
            }
            set {
                if ((object.ReferenceEquals(this.SourcePhotoRectField, value) != true)) {
                    this.SourcePhotoRectField = value;
                    this.RaisePropertyChanged("SourcePhotoRect");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="FaceService.IFaceWcfService")]
    public interface IFaceWcfService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFaceWcfService/GetFeature", ReplyAction="http://tempuri.org/IFaceWcfService/GetFeatureResponse")]
        byte[] GetFeature(byte[] imgbyte);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFaceWcfService/GetFeature", ReplyAction="http://tempuri.org/IFaceWcfService/GetFeatureResponse")]
        System.Threading.Tasks.Task<byte[]> GetFeatureAsync(byte[] imgbyte);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFaceWcfService/GetAvatar", ReplyAction="http://tempuri.org/IFaceWcfService/GetAvatarResponse")]
        byte[][] GetAvatar(byte[] imgbyte);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFaceWcfService/GetAvatar", ReplyAction="http://tempuri.org/IFaceWcfService/GetAvatarResponse")]
        System.Threading.Tasks.Task<byte[][]> GetAvatarAsync(byte[] imgbyte);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFaceWcfService/GetRect", ReplyAction="http://tempuri.org/IFaceWcfService/GetRectResponse")]
        System.Drawing.Rectangle[] GetRect(byte[] imgbyte);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFaceWcfService/GetRect", ReplyAction="http://tempuri.org/IFaceWcfService/GetRectResponse")]
        System.Threading.Tasks.Task<System.Drawing.Rectangle[]> GetRectAsync(byte[] imgbyte);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFaceWcfService/GetCompareByFace", ReplyAction="http://tempuri.org/IFaceWcfService/GetCompareByFaceResponse")]
        MsFaceSDK.FaceService.CompareFaces[] GetCompareByFace(byte[] imgbyte);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFaceWcfService/GetCompareByFace", ReplyAction="http://tempuri.org/IFaceWcfService/GetCompareByFaceResponse")]
        System.Threading.Tasks.Task<MsFaceSDK.FaceService.CompareFaces[]> GetCompareByFaceAsync(byte[] imgbyte);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFaceWcfService/GetCompareByFaceSmall", ReplyAction="http://tempuri.org/IFaceWcfService/GetCompareByFaceSmallResponse")]
        MsFaceSDK.FaceService.CompareFaces[] GetCompareByFaceSmall(byte[] imgbyte);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFaceWcfService/GetCompareByFaceSmall", ReplyAction="http://tempuri.org/IFaceWcfService/GetCompareByFaceSmallResponse")]
        System.Threading.Tasks.Task<MsFaceSDK.FaceService.CompareFaces[]> GetCompareByFaceSmallAsync(byte[] imgbyte);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFaceWcfService/GetCompareByKafka", ReplyAction="http://tempuri.org/IFaceWcfService/GetCompareByKafkaResponse")]
        MsFaceSDK.FaceService.FaceKafka GetCompareByKafka(string imgUrl);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFaceWcfService/GetCompareByKafka", ReplyAction="http://tempuri.org/IFaceWcfService/GetCompareByKafkaResponse")]
        System.Threading.Tasks.Task<MsFaceSDK.FaceService.FaceKafka> GetCompareByKafkaAsync(string imgUrl);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFaceWcfService/GetCompareByFeature", ReplyAction="http://tempuri.org/IFaceWcfService/GetCompareByFeatureResponse")]
        MsFaceSDK.FaceService.CompareFaces[] GetCompareByFeature(byte[] imgbyte);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFaceWcfService/GetCompareByFeature", ReplyAction="http://tempuri.org/IFaceWcfService/GetCompareByFeatureResponse")]
        System.Threading.Tasks.Task<MsFaceSDK.FaceService.CompareFaces[]> GetCompareByFeatureAsync(byte[] imgbyte);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFaceWcfService/WritePdb", ReplyAction="http://tempuri.org/IFaceWcfService/WritePdbResponse")]
        bool WritePdb(byte[] imgbyte);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFaceWcfService/WritePdb", ReplyAction="http://tempuri.org/IFaceWcfService/WritePdbResponse")]
        System.Threading.Tasks.Task<bool> WritePdbAsync(byte[] imgbyte);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFaceWcfService/WritePdbID", ReplyAction="http://tempuri.org/IFaceWcfService/WritePdbIDResponse")]
        bool WritePdbID(byte[] imgbyte, string idCard);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFaceWcfService/WritePdbID", ReplyAction="http://tempuri.org/IFaceWcfService/WritePdbIDResponse")]
        System.Threading.Tasks.Task<bool> WritePdbIDAsync(byte[] imgbyte, string idCard);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFaceWcfService/WriteTest", ReplyAction="http://tempuri.org/IFaceWcfService/WriteTestResponse")]
        void WriteTest(string test);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFaceWcfService/WriteTest", ReplyAction="http://tempuri.org/IFaceWcfService/WriteTestResponse")]
        System.Threading.Tasks.Task WriteTestAsync(string test);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFaceWcfServiceChannel : MsFaceSDK.FaceService.IFaceWcfService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FaceWcfServiceClient : System.ServiceModel.ClientBase<MsFaceSDK.FaceService.IFaceWcfService>, MsFaceSDK.FaceService.IFaceWcfService {
        
        public FaceWcfServiceClient() {
        }
        
        public FaceWcfServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public FaceWcfServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FaceWcfServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FaceWcfServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public byte[] GetFeature(byte[] imgbyte) {
            return base.Channel.GetFeature(imgbyte);
        }
        
        public System.Threading.Tasks.Task<byte[]> GetFeatureAsync(byte[] imgbyte) {
            return base.Channel.GetFeatureAsync(imgbyte);
        }
        
        public byte[][] GetAvatar(byte[] imgbyte) {
            return base.Channel.GetAvatar(imgbyte);
        }
        
        public System.Threading.Tasks.Task<byte[][]> GetAvatarAsync(byte[] imgbyte) {
            return base.Channel.GetAvatarAsync(imgbyte);
        }
        
        public System.Drawing.Rectangle[] GetRect(byte[] imgbyte) {
            return base.Channel.GetRect(imgbyte);
        }
        
        public System.Threading.Tasks.Task<System.Drawing.Rectangle[]> GetRectAsync(byte[] imgbyte) {
            return base.Channel.GetRectAsync(imgbyte);
        }
        
        public MsFaceSDK.FaceService.CompareFaces[] GetCompareByFace(byte[] imgbyte) {
            return base.Channel.GetCompareByFace(imgbyte);
        }
        
        public System.Threading.Tasks.Task<MsFaceSDK.FaceService.CompareFaces[]> GetCompareByFaceAsync(byte[] imgbyte) {
            return base.Channel.GetCompareByFaceAsync(imgbyte);
        }
        
        public MsFaceSDK.FaceService.CompareFaces[] GetCompareByFaceSmall(byte[] imgbyte) {
            return base.Channel.GetCompareByFaceSmall(imgbyte);
        }
        
        public System.Threading.Tasks.Task<MsFaceSDK.FaceService.CompareFaces[]> GetCompareByFaceSmallAsync(byte[] imgbyte) {
            return base.Channel.GetCompareByFaceSmallAsync(imgbyte);
        }
        
        public MsFaceSDK.FaceService.FaceKafka GetCompareByKafka(string imgUrl) {
            return base.Channel.GetCompareByKafka(imgUrl);
        }
        
        public System.Threading.Tasks.Task<MsFaceSDK.FaceService.FaceKafka> GetCompareByKafkaAsync(string imgUrl) {
            return base.Channel.GetCompareByKafkaAsync(imgUrl);
        }
        
        public MsFaceSDK.FaceService.CompareFaces[] GetCompareByFeature(byte[] imgbyte) {
            return base.Channel.GetCompareByFeature(imgbyte);
        }
        
        public System.Threading.Tasks.Task<MsFaceSDK.FaceService.CompareFaces[]> GetCompareByFeatureAsync(byte[] imgbyte) {
            return base.Channel.GetCompareByFeatureAsync(imgbyte);
        }
        
        public bool WritePdb(byte[] imgbyte) {
            return base.Channel.WritePdb(imgbyte);
        }
        
        public System.Threading.Tasks.Task<bool> WritePdbAsync(byte[] imgbyte) {
            return base.Channel.WritePdbAsync(imgbyte);
        }
        
        public bool WritePdbID(byte[] imgbyte, string idCard) {
            return base.Channel.WritePdbID(imgbyte, idCard);
        }
        
        public System.Threading.Tasks.Task<bool> WritePdbIDAsync(byte[] imgbyte, string idCard) {
            return base.Channel.WritePdbIDAsync(imgbyte, idCard);
        }
        
        public void WriteTest(string test) {
            base.Channel.WriteTest(test);
        }
        
        public System.Threading.Tasks.Task WriteTestAsync(string test) {
            return base.Channel.WriteTestAsync(test);
        }
    }
}
